name: Django CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django coverage flake8

    - name: Setup environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "DB_ENGINE=django.db.backends.mysql" >> $GITHUB_ENV
        echo "DB_NAME=test_db" >> $GITHUB_ENV
        echo "DB_USER=root" >> $GITHUB_ENV
        echo "DB_PASSWORD=rootpassword" >> $GITHUB_ENV
        echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "DB_PORT=3306" >> $GITHUB_ENV

    - name: Wait for MySQL to be ready
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-client
        for i in {1..30}; do
          if mysql -h 127.0.0.1 -P 3306 -u root -prootpassword -e "SELECT 1" test_db 2>/dev/null; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... Attempt $i"
          sleep 2
        done

    - name: Run migrations
      run: |
        python manage.py makemigrations
        python manage.py migrate

    - name: Run tests with pytest
      run: |
        coverage run --source='.' -m pytest -v --tb=short

    - name: Generate coverage report
      run: |
        coverage xml
        coverage html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

    - name: Run flake8 linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results/
